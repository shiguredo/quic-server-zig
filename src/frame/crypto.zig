const std = @import("std");
const bytes = @import("../bytes.zig");
const tls_handshake = @import("../tls/handshake.zig");
const stream = @import("../stream.zig");

/// https://www.rfc-editor.org/rfc/rfc9000.html#name-crypto-frames
///
/// CRYPTO Frame {
///   Type (i) = 0x06,
///   Offset (i),
///   Length (i),
///   Crypto Data (..),
/// }
pub const Crypto = struct {
    frame_type: u64 = frame_type,
    crypto_data: stream.RangeBuf,

    const Self = @This();
    const frame_type: u64 = 0x06;

    pub fn decode(allocator: std.mem.Allocator, in: *bytes.Bytes) !Self {
        const ty = try in.consumeVarInt();
        std.debug.assert(ty == frame_type);
        const offset = try in.consumeVarInt();
        const length = try in.consumeVarInt();
        const data = try in.consumeBytes(length);
        const crypto_data = try stream.RangeBuf.from(allocator, data, offset, false);
        errdefer crypto_data.deinit();

        return Self{ .crypto_data = crypto_data };
    }

    pub fn deinit(self: Self) void {
        self.crypto_data.deinit();
    }
};

pub fn encode_crypto_header(offset: usize, length: usize, out: *bytes.Bytes) !void {
    try out.putVarInt(Crypto.frame_type);
    try out.putVarInt(@as(usize, @intCast(offset)));
    try out.putVarInt(@as(usize, @intCast(length)));
}

test "decode CRYPTO frame" {
    {
        // Comes from the actual data sent from cloudflare/quiche.
        var buf = [_]u8{
            0x06, 0x00, 0x40, 0xe4, 0x01, 0x00, 0x00, 0xe0,
            0x03, 0x03, 0x71, 0x29, 0xde, 0x51, 0x6e, 0xff,
            0x97, 0x0c, 0x90, 0x5f, 0x90, 0x31, 0xdc, 0x46,
            0x71, 0x3d, 0x6b, 0xd9, 0x53, 0x82, 0xe3, 0xf4,
            0x09, 0x60, 0x71, 0xe9, 0xb2, 0xdf, 0x02, 0x79,
            0x83, 0x00, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13,
            0x02, 0x13, 0x03, 0x01, 0x00, 0x00, 0xb1, 0x00,
            0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0a,
            0x00, 0x08, 0x00, 0x06, 0x00, 0x1d, 0x00, 0x17,
            0x00, 0x18, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24,
            0x00, 0x1d, 0x00, 0x20, 0xff, 0x87, 0xb0, 0xc7,
            0x88, 0xe5, 0xf9, 0x27, 0x76, 0x2f, 0x8f, 0x5a,
            0x17, 0x7e, 0xdf, 0x26, 0xb1, 0xf1, 0x9c, 0x17,
            0x96, 0xcb, 0xa9, 0x79, 0xca, 0x4e, 0x10, 0x12,
            0x83, 0xc2, 0xf9, 0x15, 0x00, 0x0d, 0x00, 0x12,
            0x00, 0x10, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b,
            0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x03,
            0x05, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0c,
            0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
            0x68, 0x6f, 0x73, 0x74, 0x00, 0x10, 0x00, 0x05,
            0x00, 0x03, 0x02, 0x68, 0x33, 0x00, 0x0b, 0x00,
            0x02, 0x01, 0x00, 0x00, 0x39, 0x00, 0x35, 0x04,
            0x04, 0x80, 0x39, 0x38, 0x70, 0x05, 0x04, 0x80,
            0x39, 0x38, 0x70, 0x06, 0x04, 0x80, 0x39, 0x38,
            0x70, 0x07, 0x04, 0x80, 0x39, 0x38, 0x70, 0x08,
            0x02, 0x40, 0x64, 0x09, 0x02, 0x40, 0x64, 0x0e,
            0x01, 0x03, 0x0f, 0x10, 0x65, 0x89, 0xe0, 0x75,
            0x0f, 0xa5, 0xc3, 0xb1, 0xae, 0xbe, 0x0d, 0x7b,
            0xa3, 0xc3, 0x49, 0x39, 0x00, 0x17, 0x00, 0x00,
        };
        var in = bytes.Bytes{ .buf = &buf };

        const got = try Crypto.decode(std.testing.allocator, &in);
        defer got.deinit();

        try std.testing.expectEqual(Crypto.frame_type, got.frame_type);
        try std.testing.expectEqual(@as(u64, 0), got.crypto_data.offset);
    }

    {
        // Comes from https://www.rfc-editor.org/rfc/rfc9001#name-client-initial
        var buf = [_]u8{
            0x06, 0x00, 0x40, 0xf1, 0x01, 0x00, 0x00, 0xed,
            0x03, 0x03, 0xeb, 0xf8, 0xfa, 0x56, 0xf1, 0x29,
            0x39, 0xb9, 0x58, 0x4a, 0x38, 0x96, 0x47, 0x2e,
            0xc4, 0x0b, 0xb8, 0x63, 0xcf, 0xd3, 0xe8, 0x68,
            0x04, 0xfe, 0x3a, 0x47, 0xf0, 0x6a, 0x2b, 0x69,
            0x48, 0x4c, 0x00, 0x00, 0x04, 0x13, 0x01, 0x13,
            0x02, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x65, 0x78,
            0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
            0x6d, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a,
            0x00, 0x08, 0x00, 0x06, 0x00, 0x1d, 0x00, 0x17,
            0x00, 0x18, 0x00, 0x10, 0x00, 0x07, 0x00, 0x05,
            0x04, 0x61, 0x6c, 0x70, 0x6e, 0x00, 0x05, 0x00,
            0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
            0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
            0x93, 0x70, 0xb2, 0xc9, 0xca, 0xa4, 0x7f, 0xba,
            0xba, 0xf4, 0x55, 0x9f, 0xed, 0xba, 0x75, 0x3d,
            0xe1, 0x71, 0xfa, 0x71, 0xf5, 0x0f, 0x1c, 0xe1,
            0x5d, 0x43, 0xe9, 0x94, 0xec, 0x74, 0xd7, 0x48,
            0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00,
            0x0d, 0x00, 0x10, 0x00, 0x0e, 0x04, 0x03, 0x05,
            0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08,
            0x05, 0x08, 0x06, 0x00, 0x2d, 0x00, 0x02, 0x01,
            0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01, 0x00,
            0x39, 0x00, 0x32, 0x04, 0x08, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x04, 0x80,
            0x00, 0xff, 0xff, 0x07, 0x04, 0x80, 0x00, 0xff,
            0xff, 0x08, 0x01, 0x10, 0x01, 0x04, 0x80, 0x00,
            0x75, 0x30, 0x09, 0x01, 0x10, 0x0f, 0x08, 0x83,
            0x94, 0xc8, 0xf0, 0x3e, 0x51, 0x57, 0x08, 0x06,
            0x04, 0x80, 0x00, 0xff, 0xff,
        };
        var in = bytes.Bytes{ .buf = &buf };

        const got = try Crypto.decode(std.testing.allocator, &in);
        defer got.deinit();

        try std.testing.expectEqual(Crypto.frame_type, got.frame_type);
        try std.testing.expectEqual(@as(u64, 0), got.crypto_data.offset);
    }
}
